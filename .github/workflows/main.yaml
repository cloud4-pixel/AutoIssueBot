name: AutoIssueBot
on: push

jobs:
  
  get-file:
    runs-on: ubuntu-latest
    outputs:
      file-content: ${{ steps.read-app-content.outputs.content }}

    steps:

      - name: Get Code
        uses: actions/checkout@v3


      - name: Get code
        id: get-app-file
        run: |
          file=$(find . -type f -name 'app.*' | head -n 1)
          echo "file=$file" >> "$GITHUB_OUTPUT"      
      
      - name: Read file content
        id: read-app-content
        run: |
          content=$(cat ${{ steps.get-app-file.outputs.file }} | base64 -w 0)
          echo "content=$content" >> $GITHUB_OUTPUT

  send_to_gemini:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.send-to-gemini.outputs.response }}
      json: ${{ steps.send-to-gemini.outputs.json }}


    env: 
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      FILE_CONTENT: ${{ needs.get-file.outputs.file-content }}

    environment: send_to_gemini
    needs: get-file

    steps:
      - name: send to gemini
        id: send-to-gemini
        run: |
            decoded=$(echo "$FILE_CONTENT" | base64 --decode)
            json=$(jq -n --arg text " Analyze the following code and answer in one single word only â€” either 'Yes' if the code is valid and error-free, or 'No' if it contains any errors. Do not explain, add punctuation, or use any extra words. Code: $decoded" \
            '{contents: [{parts: [{text: $text}]}]}')
            response=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GOOGLE_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$json")

            echo (curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GOOGLE_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$json")

            result=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')
            echo "$result"
            echo "response=$result" >> $GITHUB_OUTPUT

            
  print-result:
    runs-on: ubuntu-latest
    needs: 
      - send_to_gemini
      - get-file

    steps:
      - name: print result from gemini
        run: echo "Gemini said ${{ needs.send_to_gemini.outputs.result }}"

      - name: print send json
        run: echo "Gemini said ${{ needs.send_to_gemini.outputs.json }}"

  
      - name: print file name
        env:
          FILE_CONTENT: ${{ needs.get-file.outputs.file-content }}
        run: 
          echo FILE_CONTENT
          echo "$FILE_CONTENT"
          decoded=$(echo "$FILE_CONTENT" | base64 --decode)
          echo "Gemini said"
          printf '%s\n' "$decoded"

